services:

  # Initialize MinIO
  minio:
    container_name: minio
    image: minio/minio:latest
    hostname: minio
    ports:
      - "9000:9000" # primary MinIO service (S3-compatible API endpoint)
      - "9001:9001" # MinIO Console (web-based UI for managing MinIO)
    environment:
      MINIO_ROOT_USER: minio_user
      MINIO_ROOT_PASSWORD: minio_password
      AWS_REGION: eu-north-1
    volumes:
      - ./minio-data:/data
    command: server --console-address ":9001" /data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/ready || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  # Create MinIO bucket
  minio-bucket-init:
    container_name: minio-bucket-init
    image: minio/mc:latest
    volumes:
      - ./scripts/minio-bucket-init.sh:/minio-bucket-init.sh
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: ["/bin/bash", "/minio-bucket-init.sh"]
    restart: "no"
  
  # Initialize DVC
  dvc-init:
    container_name: dvc-init
    build:
      context: ./dvc
      dockerfile: Dockerfile
    volumes:
      - ./scripts/dvc-init.sh:/dvc-init.sh
      - ./dvc:/dvc
    depends_on:
      minio-bucket-init:
        condition: service_started
    entrypoint: ["/bin/bash", "/dvc-init.sh"]
    restart: "no"

  # Initialize REST API server
  rest-api:
    container_name: rest-api
    build:
      context: .
      dockerfile: Dockerfile
    hostname: rest-api
    ports:
      - "8000:8000"
    volumes:
      - ./dvc:/app/dvc
    depends_on:
      dvc-init:
        condition: service_started
    restart: unless-stopped

  # Initialize Streamlit dashboard
  streamlit-dashboard:
    container_name: streamlit-dashboard
    build:
      context: .
      dockerfile: dashboard/Dockerfile
    ports:
      - "8501:8501"
    volumes:
      - ./dvc:/app/dvc
    depends_on:
      dvc-init:
        condition: service_started
    restart: unless-stopped
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: mlflow
    depends_on:
      - minio
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minio_user
      AWS_SECRET_ACCESS_KEY: minio_password
    command: [
      "mlflow", "server",
      "--backend-store-uri", "sqlite:///mlflow.db",
      "--default-artifact-root", "s3://your-bucket-name/mlflow_artifacts",
      "--host", "0.0.0.0"
    ]
    ports:
      - "5000:5000"
    volumes:
      - ./mlflow-data:/mlflow